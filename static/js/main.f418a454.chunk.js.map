{"version":3,"sources":["components/RichTextEditor/configs.js","components/RichTextEditor/index.js","App.js","reportWebVitals.js","index.js"],"names":["emojis","controls","defaultColorOptions","RichTextEditor","onChange","value","disabled","colorOptions","enableToolbarOptions","otherProps","useState","BraftEditor","createEditorState","editorState","setEditorState","useEffect","className","toHTML","contentClassName","language","colors","stripPastedStyles","textBackgroundColor","readOnly","extendControls","key","type","component","title","placement","QuestionCircleOutlined","TextArea","Input","App","htmlInputValue","setHtmlInputValue","htmlOutputValue","setHtmlOutputValue","rows","placeholder","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAAaA,EAAS,CACpB,eACA,2BACA,2BACA,2BACA,eACA,eACA,eACA,SACA,eACA,eACA,eACA,eACA,eACA,eACA,SACA,eACA,qBACA,eACA,qBACA,gBAGWC,EAAW,CACtB,OACA,OACA,YACA,YACA,OACA,SACA,YACA,UACA,UACA,aACA,YACA,OACA,aACA,KACA,YACA,OACA,SAGWC,EAAsB,CACjC,UACA,UACA,UACA,UACA,UACA,W,mICoBaC,EA5DQ,SAAC,GAOjB,IANLC,EAMI,EANJA,SACAC,EAKI,EALJA,MACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,qBACGC,EACC,iBACJ,EAAsCC,mBAASC,IAAYC,kBAAkBP,IAA7E,mBAAOQ,EAAP,KAAoBC,EAApB,KAWA,OAJAC,qBAAU,WACRD,EAAeH,IAAYC,kBAAkBP,MAC5C,CAACA,IAGF,qBAAKW,UAAU,UAAf,SACE,cAAC,IAAD,aACEX,MAAOQ,EACPT,SAbsB,SAACS,GAC3BC,EAAeD,GACK,oBAAbT,GAA2BA,EAASS,EAAYI,WAYnDD,UAAU,mBACVE,iBAAiB,gBACjBjB,SAAUO,GAAwBP,EAClCkB,SAAS,UACTC,OAAQb,GAAgBL,EACxBF,OAAQA,EACRqB,mBAAmB,EACnBC,qBAAqB,EACrBC,SAAUjB,EACVkB,eAAgB,CACd,CACEC,IAAK,cACLC,KAAM,YACNC,UACE,cAAC,IAAD,CACEC,MAAO,8BACPZ,UAAU,kBACVa,UAAU,SAHZ,SAIE,cAACC,EAAA,EAAD,SAKJrB,O,SClDJsB,G,cAAaC,IAAbD,UAkCOE,EAhCH,WACV,MAA4CvB,qBAA5C,mBAAOwB,EAAP,KAAuBC,EAAvB,KACA,EAA8CzB,qBAA9C,mBAAO0B,EAAP,KAAwBC,EAAxB,KAUA,OACE,qBAAKrB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAAgBX,MAAO6B,EAAgB9B,SAXhB,SAACC,GAC5BgC,EAAmBhC,MAWf,sBAAKW,UAAU,cAAf,uBAEE,cAACe,EAAD,CACEO,KAAM,EACNC,YAAY,8DACZlC,MAAO6B,EACP9B,SAdkB,SAACoC,GAC3BL,EAAkBK,EAAEC,OAAOpC,UAOvB,cASE,cAAC0B,EAAD,CAAUO,KAAM,EAAGjC,MAAO+B,aCrBrBM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f418a454.chunk.js","sourcesContent":["export const emojis = [\n  \"📣\",\n  \"👉🏻\",\n  \"👇🏻\",\n  \"🙌🏻\",\n  \"🛵\",\n  \"🎉\",\n  \"🔎\",\n  \"✅\",\n  \"🤩\",\n  \"🥳\",\n  \"🥰\",\n  \"🔥\",\n  \"🎯\",\n  \"🎨\",\n  \"⏰\",\n  \"💰\",\n  \"🛎️\",\n  \"🚫\",\n  \"🅿️\",\n  \"🔸\",\n];\n\nexport const controls = [\n  \"undo\",\n  \"redo\",\n  \"separator\",\n  \"font-size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"list-ul\",\n  \"list-ol\",\n  \"text-color\",\n  \"separator\",\n  \"code\",\n  \"blockquote\",\n  \"hr\",\n  \"separator\",\n  \"link\",\n  \"emoji\",\n];\n\nexport const defaultColorOptions = [\n  \"#94C950\",\n  \"#00C9E7\",\n  \"#ABE3D1\",\n  \"#F65554\",\n  \"#ADADAD\",\n  \"#555555\",\n];\n","import React, { useState, useEffect } from \"react\";\nimport { emojis, controls, defaultColorOptions } from \"./configs\";\nimport PropTypes from \"prop-types\";\nimport { Tooltip } from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport BraftEditor from \"braft-editor\";\nimport \"braft-editor/dist/index.css\";\nimport \"./index.css\";\n\nconst RichTextEditor = ({\n  onChange,\n  value,\n  disabled,\n  colorOptions,\n  enableToolbarOptions,\n  ...otherProps\n}) => {\n  const [editorState, setEditorState] = useState(BraftEditor.createEditorState(value));\n\n  const onEditorStateChange = (editorState) => {\n    setEditorState(editorState);\n    typeof onChange === \"function\" && onChange(editorState.toHTML());\n  };\n\n  useEffect(() => {\n    setEditorState(BraftEditor.createEditorState(value));\n  }, [value]);\n\n  return (\n    <div className=\"wrapper\">\n      <BraftEditor\n        value={editorState}\n        onChange={onEditorStateChange}\n        className=\"rich-text-editor\"\n        contentClassName=\"editorContent\"\n        controls={enableToolbarOptions || controls}\n        language=\"zh-hant\"\n        colors={colorOptions || defaultColorOptions}\n        emojis={emojis}\n        stripPastedStyles={true}\n        textBackgroundColor={false}\n        readOnly={disabled}\n        extendControls={[\n          {\n            key: \"description\",\n            type: \"component\",\n            component: (\n              <Tooltip\n                title={\"Hi 你們好！\"}\n                className=\"descriptionIcon\"\n                placement=\"bottom\">\n                <QuestionCircleOutlined />\n              </Tooltip>\n            ),\n          },\n        ]}\n        {...otherProps}\n      />\n    </div>\n  );\n};\n\nRichTextEditor.propTypes = {\n  colorOptions: PropTypes.array, //an array of hex color\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n  enableToolbarOptions: PropTypes.array,\n};\n\nexport default RichTextEditor;\n","import { useState } from \"react\";\nimport RichTextEditor from \"./components/RichTextEditor\";\nimport { Input } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nconst { TextArea } = Input;\n\nconst App = () => {\n  const [htmlInputValue, setHtmlInputValue] = useState();\n  const [htmlOutputValue, setHtmlOutputValue] = useState();\n\n  const handleEditorOnChange = (value) => {\n    setHtmlOutputValue(value);\n  };\n\n  const handleInputOnChange = (e) => {\n    setHtmlInputValue(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <RichTextEditor value={htmlInputValue} onChange={handleEditorOnChange} />\n        <div className=\"html-inputs\">\n          HTML Input\n          <TextArea\n            rows={9}\n            placeholder=\"Input your HTML here to be the initial value of the editor.\"\n            value={htmlInputValue}\n            onChange={handleInputOnChange}\n          />\n          HTML Output\n          <TextArea rows={9} value={htmlOutputValue} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}